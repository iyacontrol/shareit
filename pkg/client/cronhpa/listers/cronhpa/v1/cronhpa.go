/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/iyacontrol/shareit/pkg/apis/cronhpa/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CronHpaLister helps list CronHpas.
type CronHpaLister interface {
	// List lists all CronHpas in the indexer.
	List(selector labels.Selector) (ret []*v1.CronHpa, err error)
	// CronHpas returns an object that can list and get CronHpas.
	CronHpas(namespace string) CronHpaNamespaceLister
	CronHpaListerExpansion
}

// cronHpaLister implements the CronHpaLister interface.
type cronHpaLister struct {
	indexer cache.Indexer
}

// NewCronHpaLister returns a new CronHpaLister.
func NewCronHpaLister(indexer cache.Indexer) CronHpaLister {
	return &cronHpaLister{indexer: indexer}
}

// List lists all CronHpas in the indexer.
func (s *cronHpaLister) List(selector labels.Selector) (ret []*v1.CronHpa, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CronHpa))
	})
	return ret, err
}

// CronHpas returns an object that can list and get CronHpas.
func (s *cronHpaLister) CronHpas(namespace string) CronHpaNamespaceLister {
	return cronHpaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CronHpaNamespaceLister helps list and get CronHpas.
type CronHpaNamespaceLister interface {
	// List lists all CronHpas in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.CronHpa, err error)
	// Get retrieves the CronHpa from the indexer for a given namespace and name.
	Get(name string) (*v1.CronHpa, error)
	CronHpaNamespaceListerExpansion
}

// cronHpaNamespaceLister implements the CronHpaNamespaceLister
// interface.
type cronHpaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CronHpas in the indexer for a given namespace.
func (s cronHpaNamespaceLister) List(selector labels.Selector) (ret []*v1.CronHpa, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CronHpa))
	})
	return ret, err
}

// Get retrieves the CronHpa from the indexer for a given namespace and name.
func (s cronHpaNamespaceLister) Get(name string) (*v1.CronHpa, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("cronhpa"), name)
	}
	return obj.(*v1.CronHpa), nil
}
